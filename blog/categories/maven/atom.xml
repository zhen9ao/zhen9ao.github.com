<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: maven | Jack's Blog]]></title>
  <link href="http://zhen9ao.github.io/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://zhen9ao.github.io/"/>
  <updated>2013-08-08T14:52:30+08:00</updated>
  <id>http://zhen9ao.github.io/</id>
  <author>
    <name><![CDATA[zhen9ao]]></name>
    <email><![CDATA[zhen9ao@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEA中手动强制更新Maven Dependencies]]></title>
    <link href="http://zhen9ao.github.io/blog/2012/04/26/refresh-maven-dependency-manually-in-intellij-idea/"/>
    <updated>2012-04-26T12:01:00+08:00</updated>
    <id>http://zhen9ao.github.io/blog/2012/04/26/refresh-maven-dependency-manually-in-intellij-idea</id>
    <content type="html"><![CDATA[<p>Intellj IDEA 的自动载入Mave依赖的功能虽然好用，但有时候依赖多了或者缓存出问题，就会导致修改pom文件却没有触发自动重新载入的动作，这个时候就需要手动强制让Intellj IDEA更新依赖了。主要需要以下两步：</p>

<ol>
<li>手动删除<code>Project Settings</code>里面的<code>Libraries</code>内容</li>
<li><code>mvn clean</code>删除之前编译过的文件</li>
<li><code>Reimport all maven projects</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用mave编译Android项目]]></title>
    <link href="http://zhen9ao.github.io/blog/2011/11/20/shi-yong-mavebian-yi-androidxiang-mu/"/>
    <updated>2011-11-20T17:10:00+08:00</updated>
    <id>http://zhen9ao.github.io/blog/2011/11/20/shi-yong-mavebian-yi-androidxiang-mu</id>
    <content type="html"><![CDATA[<h2>为何打算使用Maven</h2>

<ol>
<li><p>maven可以让目录更加简洁和清晰</p></li>
<li><p>利用maven，不用手动下载依赖的各种jar文件，可以减小源码大小，所需的依赖库都又maven自动处理。</p></li>
<li><p>主要使用了开源的maven-android-plugin（3.0版本改名为<a href="http://code.google.com/p/maven-android-plugin/wiki/PluginRenamed">android-maven-plugin</a>）插件</p></li>
</ol>


<p>本文主要介绍在Mac OS X下使用maven进行android编译需要的做的工作。</p>

<!--more-->


<h2>开始折腾</h2>

<ol>
<li>安装maven</li>
</ol>


<p>我使用的是Homebrew，执行以下命令：</p>

<p>{% codeblock %}
brew install maven
{% endcodeblock %}</p>

<ol>
<li>配置系统环境</li>
</ol>


<p>主要需要配置的是ANDROID_HOME这个环境变量，在我这里配置如下：</p>

<p>{% codeblock %}
export ANDROID_HOME=/Users/zheng/Documents/Android/android-sdk-mac_x86
{% endcodeblock %}</p>

<p>可以将环境变量写到.bash_profile（如果使用bash）或者.zshrc（如果使用zsh）中。</p>

<ol>
<li>下载例子程序</li>
</ol>


<p>在官方的<a href="http://code.google.com/p/maven-android-plugin/wiki/Samples">wiki页面</a>可以下载例子程序，我选择了3.0.0-alpha版的，看了一下，差别不是特别大，主要是集成了一些新的命令。</p>

<ol>
<li>编辑例子程序</li>
</ol>


<p>主要需要编辑的是pom.xml文件，也是maven的核心文件。</p>

<p>本文件展示的是修改后的helloflashlight文件夹下的pom.xml文件</p>

<p>{% codeblock pom.xml lang:xml %}
&lt;?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"></p>

<pre><code>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
&lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
&lt;artifactId&gt;helloflashlight&lt;/artifactId&gt;
&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
&lt;packaging&gt;apk&lt;/packaging&gt;
&lt;name&gt;HelloFlashlight&lt;/name&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.google.android&lt;/groupId&gt;
        &lt;artifactId&gt;android&lt;/artifactId&gt;
        &lt;version&gt;2.3.3&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;xom&lt;/groupId&gt;
        &lt;artifactId&gt;xom&lt;/artifactId&gt;
        &lt;version&gt;1.2.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;xom&lt;/groupId&gt;
        &lt;artifactId&gt;xom&lt;/artifactId&gt;
        &lt;version&gt;1.2.5&lt;/version&gt;
        &lt;exclusions&gt;
            &lt;exclusion&gt;
                &lt;groupId&gt;xml-apis&lt;/groupId&gt;
                &lt;artifactId&gt;xml-apis&lt;/artifactId&gt;
            &lt;/exclusion&gt;
            &lt;exclusion&gt;
                &lt;groupId&gt;xerces&lt;/groupId&gt;
                &lt;artifactId&gt;xercesImpl&lt;/artifactId&gt;
            &lt;/exclusion&gt;
            &lt;exclusion&gt;
                &lt;groupId&gt;xalan&lt;/groupId&gt;
                &lt;artifactId&gt;xalan&lt;/artifactId&gt;
            &lt;/exclusion&gt;
        &lt;/exclusions&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.caacsri.mobile&lt;/groupId&gt;
        &lt;artifactId&gt;mobile-client&lt;/artifactId&gt;
        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
&lt;build&gt;
    &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
    &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
    &lt;pluginManagement&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.jayway.maven.plugins.android.generation2&lt;/groupId&gt;
                &lt;artifactId&gt;android-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.0.0-alpha-14&lt;/version&gt;
                &lt;extensions&gt;true&lt;/extensions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.jayway.maven.plugins.android.generation2&lt;/groupId&gt;
            &lt;artifactId&gt;android-maven-plugin&lt;/artifactId&gt;
            &lt;configuration&gt;
                &lt;sdk&gt;
                    &lt;path&gt;/Users/zheng/Documents/Android/android-sdk-mac_x86&lt;/path&gt;
                    &lt;platform&gt;10&lt;/platform&gt;
                &lt;/sdk&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p></project>
{% endcodeblock %}</p>

<p>需要注意的主要是以下几个部分：</p>

<p>{% codeblock lang:xml %}
<dependency>
  <groupId>com.google.android</groupId>
  <artifactId>android</artifactId>
  <version>2.3.3</version>
  <scope>provided</scope>
</dependency>
{% endcodeblock %}</p>

<p>这里需要将scope设置为provided</p>

<p>{% codeblock lang:xml %}
<plugin>
  <groupId>com.jayway.maven.plugins.android.generation2</groupId>
  <artifactId>android-maven-plugin</artifactId>
  <configuration></p>

<pre><code> &lt;sdk&gt;
 &lt;path&gt;/Users/zheng/Documents/Android/android-sdk-mac_x86&lt;/path&gt;
 &lt;platform&gt;10&lt;/platform&gt;
 &lt;/sdk&gt;
</code></pre>

<p>  </configuration>
</plugin>
{% endcodeblock %}</p>

<p>这里需要设置path，指向sdk的安装目录。"10"是对应的"android2.3.3"的版本号</p>

<p>{% codeblock lang:xml %}
<dependency>
  <groupId>xom</groupId>
  <artifactId>xom</artifactId>
  <version>1.2.5</version>
  <exclusions></p>

<pre><code>&lt;exclusion&gt;
  &lt;groupId&gt;xml-apis&lt;/groupId&gt;
  &lt;artifactId&gt;xml-apis&lt;/artifactId&gt;
&lt;/exclusion&gt;
&lt;exclusion&gt;
  &lt;groupId&gt;xerces&lt;/groupId&gt;
  &lt;artifactId&gt;xercesImpl&lt;/artifactId&gt;
&lt;/exclusion&gt;
&lt;exclusion&gt;
  &lt;groupId&gt;xalan&lt;/groupId&gt;
  &lt;artifactId&gt;xalan&lt;/artifactId&gt;
&lt;/exclusion&gt;
</code></pre>

<p>  </exclusions>
</dependency>
{% endcodeblock %}</p>

<p>使用了第三方的依赖，这里添加了exclusions，因为xom的依赖可能较老或者在较老的jvm虚拟机上编译的原因，所以如果不添加exclusion，可能在在转换成dex文件的时候会报错</p>

<p>{% codeblock %}
[INFO] Ill-advised or mistaken usage of a core class (java.<em> or javax.</em>)
[INFO] when not building a core library.
[INFO]
[INFO] This is often due to inadvertently including a core library file
[INFO] in your application's project, when using an IDE (such as
[INFO] Eclipse). If you are sure you're not intentionally defining a
[INFO] core class, then this is the most likely explanation of what's
[INFO] going on.
[INFO]
[INFO] However, you might actually be trying to define a class in a core
[INFO] namespace, the source of which you may have taken, for example,
[INFO] from a non-Android virtual machine project. This will most
[INFO] assuredly not work. At a minimum, it jeopardizes the
[INFO] compatibility of your app with future versions of the platform.
[INFO] It is also often of questionable legality.
[INFO]
[INFO] If you really intend to build a core library -- which is only
[INFO] appropriate as part of creating a full virtual machine
[INFO] distribution, as opposed to compiling an application -- then use
[INFO] the "--core-library" option to suppress this error message.
[INFO]
[INFO] If you go ahead and use "--core-library" but are in fact
[INFO] building an application, then be forewarned that your application
[INFO] will still fail to build or run, at some point. Please be
[INFO] prepared for angry customers who find, for example, that your
[INFO] application ceases to function once they upgrade their operating
[INFO] system. You will be to blame for this problem.
[INFO]
[INFO] If you are legitimately using some code that happens to be in a
[INFO] core package, then the easiest safe alternative you have is to
[INFO] repackage that code. That is, move the classes in question into
[INFO] your own package namespace. This means that they will never be in
[INFO] conflict with core system classes. JarJar is a tool that may help
[INFO] you in this endeavor. If you find that you cannot do this, then
[INFO] that is an indication that the path you are on will ultimately
[INFO] lead to pain, suffering, grief, and lamentation.
{% endcodeblock %}</p>

<p>提示中说明可以通过添加"--core-library"参数解决这个问题，具体在pom文件中就是在configuration部分加入如下代码：</p>

<p>{% codeblock lang:xml %}
<dex>
  <jvmArguments></p>

<pre><code>&lt;jvmArgument&gt;-Xms256m&lt;/jvmArgument&gt;
&lt;jvmArgument&gt;-Xmx512m&lt;/jvmArgument&gt;
</code></pre>

<p>  </jvmArguments>
  <coreLibrary>true|false</coreLibrary>
  <noLocals>true|false</noLocals>
  <optimize>true|false</optimize>
</dex>
{% endcodeblock %}</p>

<p>这也是除了添加exclusion以外的另一种解决方案，但是经我的测试，这种方案会导致很长时间的build和一大堆提示信息，说明某个类不能被编译什么的，但是最后还是能通过编译，不过我不喜欢用这种方式，还是添加exclusions吧，那种方式的输出结果比较简洁。</p>

<ol>
<li>编译及运行</li>
</ol>


<p>切换到目录下，编译代码使用命令：</p>

<p>{% codeblock %}
mvn clean install
{% endcodeblock %}</p>

<p>部署和运行代码使用以下命令：</p>

<p>{% codeblock %}
mvn android:deploy android:run
{% endcodeblock %}</p>

<ol>
<li>如何创建新项目</li>
</ol>


<p>最后，说一下如何直接创建新项目。按着<a href="https://github.com/akquinet/android-archetypes/wiki">官方wiki</a>里的说法，有三种创建方式"quickstart"，"with-test"和"release"三种方式，一般使用quickstart即可，其他的配置可以自己添加。</p>

<p>quickstart的创建方式如下：</p>

<p>{% codeblock %}
mvn archetype:generate \
  -DarchetypeArtifactId=android-quickstart \
  -DarchetypeGroupId=de.akquinet.android.archetypes \
  -DarchetypeVersion=1.0.5 \
  -DgroupId=your.company \
  -DartifactId=my-android-application
{% endcodeblock %}</p>

<p>默认情况下package名和groupId相同，可以使用'-Dpackage=...'的参数创建自定义的包名。创建的项目默认使用android2.2，可以通过'-Dplatform=...'设置使用的android sdk。</p>
]]></content>
  </entry>
  
</feed>
